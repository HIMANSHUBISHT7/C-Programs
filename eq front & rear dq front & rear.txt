void enqueueFront(int item) {
    if ((front == 0 && rear == MAX_SIZE - 1) || (front == rear + 1)) {
        printf("Deque Overflow!\n");
        exit(1);
    } else if (front == -1 && rear == -1) {
        front = rear = 0;
    } else if (front == 0) {
        front = MAX_SIZE - 1;
    } else {
        front--;
    }
    deque[front] = item;
}

void enqueueRear(int item) {
    if ((front == 0 && rear == MAX_SIZE - 1) || (front == rear + 1)) {
        printf("Deque Overflow!\n");
        exit(1);
    } else if (front == -1 && rear == -1) {
        front = rear = 0;
    } else if (rear == MAX_SIZE - 1) {
        rear = 0;
    } else {
        rear++;
    }
    deque[rear] = item;
}

int dequeueFront() {
    int item;
    if (front == -1) {
        printf("Deque Underflow!\n");
        exit(1);
    } else {
        item = deque[front];
        if (front == rear) {
            front = rear = -1;
        } else if (front == MAX_SIZE - 1) {
            front = 0;
        } else {
            front++;
        }
        return item;
    }
}

int dequeueRear() {
    int item;
    if (front == -1) {
        printf("Deque Underflow!\n");
        exit(1);
    } else {
        item = deque[rear];
        if (front == rear) {
            front = rear = -1;
        } else if (rear == 0) {
            rear = MAX_SIZE - 1;
        } else {
            rear--;
        }
        return item;
    }
}

void display() {
    int i;
    if (front == -1) {
        printf("Deque is empty!\n");
    } else {
        printf("Deque elements are: ");
        if (front <= rear) {
            for (i = front; i <= rear; i++) {
                printf("%d ", deque[i]);
            }
        } else {
            for (i = front; i < MAX_SIZE; i++) {
                printf("%d ", deque[i]);
            }
            for (i = 0; i <= rear; i++) {
                printf("%d ", deque[i]);
            }
        }
        printf("\n");
    }
}

