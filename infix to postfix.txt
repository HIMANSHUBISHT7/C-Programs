#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_SIZE 100

// Stack Implementation
int stack[MAX_SIZE];
int top = -1;

void push(int item) {
    if (top == MAX_SIZE - 1) {
        printf("Stack Overflow!\n");
        exit(1);
    } else {
        stack[++top] = item;
    }
}

int pop() {
    if (top == -1) {
        printf("Stack Underflow!\n");
        exit(1);
    } else {
        int item = stack[top--];
        return item;
    }
}

int peek() {
    if (top == -1) {
        printf("Stack Underflow!\n");
        exit(1);
    } else {
        return stack[top];
    }
}

int is_operator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

int precedence(char c) {
    if (c == '+' || c == '-') {
        return 1;
    } else if (c == '*' || c == '/') {
        return 2;
    } else {
        return 0;
    }
}

void infix_to_postfix(char infix[], char postfix[]) {
    int i, j;
    char c;

    for (i = 0, j = 0; infix[i] != '\0'; i++) {
        if (isdigit(infix[i])) {
            postfix[j++] = infix[i];
        } else if (is_operator(infix[i])) {
            while (top != -1 && precedence(infix[i]) <= precedence(peek())) {
                c = pop();
                postfix[j++] = c;
            }
            push(infix[i]);
        } else if (infix[i] == '(') {
            push(infix[i]);
        } else if (infix[i] == ')') {
            while ((c = pop()) != '(') {
                postfix[j++] = c;
            }
        }
    }

    while (top != -1) {
        c = pop();
        postfix[j++] = c;
    }

    postfix[j] = '\0';
}

int main() {
    char infix[MAX_SIZE], postfix[MAX_SIZE];

    printf("Enter an infix expression: ");
    scanf("%s", infix);

    infix_to_postfix(infix, postfix);

    printf("Postfix expression: %s\n", postfix);

    return 0;
}